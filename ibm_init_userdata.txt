#cloud-config
bootcmd:
  - /usr/bin/setdb dhclient.mgmt disable && echo '*** disabled dhclient'
  - /usr/bin/setdb provision.1nic forced_enable && echo '*** enabled 1nic'

write_files:
  - path: /config/ibmbluemix_vsi_init.sh
    permissions: 0755
    content: |
        #!/bin/bash
        function check_mcpd_up() {
            checks=0
            while [ $checks -lt 120 ]; do echo -n "checking mcpd..."
                if tmsh -a show sys mcp-state field-fmt | grep -q running; then
                    echo ready
                    break
                fi
                echo not ready
                let checks=checks+1
                sleep 10
            done
        }
        function setup_init() {
            check_mcpd_up
        }
        function setup_passwords() {
            /usr/bin/passwd admin __TMOS_ADMIN_PASSWORD__ >/dev/null 2>&1
            /usr/bin/passwd root __TMOS_ROOT_PASSWORD__ >/dev/null 2>&1
        }
        function setup_base() {
            tmsh modify sys db provision.1nic value forced_enable
            tmsh modify sys global-settings mgmt-dhcp disabled
        }
        function mount_config_drive() {
            configDriveSrc=$(blkid -t LABEL="config-2" -odevice)
            if [[ ! -z $configDriveSrc ]]
            then
                mounted=$(cat /proc/mounts | grep $configDriveSrc | wc -l)
                if [[ $mounted == 0 ]]
                then
                    configDriveDest="/mnt/config"
                    mkdir -p $configDriveDest
                    mount "$configDriveSrc" $configDriveDest;
                fi
            fi
        }
        function import_ssh_keys() {
            mount_config_drive
            /usr/bin/python - << EOF
        import json
        meta_data=json.load(open('/mnt/config/openstack/latest/meta_data.json'))
        for key in meta_data['public_keys']:
            with open('/root/.ssh/authorized_keys', 'a') as ak:
                ak.write(meta_data['public_keys'][key] + '\n')
        with open('/config/host_setup.sh','w') as hs:
            hs.write("#!/bin/bash\ntmsh modify sys global-settings hostname %s\n" % meta_data['hostname'])
            hs.write("tmsh delete cm trust-domain all\ntmsh mv cm device bigip1 %s\n" % meta_data['hostname'])
            hs.write("tmsh modify sys global-settings gui-setup disabled\n")
        EOF
            chmod +x /config/host_setup.sh
            /config/host_setup.sh
        }
        function setup_networking() {
            mount_config_drive
            /usr/bin/python - << EOF
        import os, json, subprocess
        nmd = json.load(open('/mnt/config/openstack/latest/network_data.json'))
        onenic = False
        fnull = open(os.devnull, 'w')
        is_1nic = subprocess.call(['/usr/bin/tmsh', 'list', 'net', 'interface', '1.0'], stdout=fnull)
        if is_1nic == 0:
            onenic = True
        with open('/config/network_setup.sh','w') as ns:
            ns.write("#!/bin/bash\n")
            supported_link_types = ['phy', 'bridge', 'ovs', 'vif', 'tap']
            supported_network_types = ['ipv4', 'ipv6']
            df_gw_set = mgmt_dhcp = False
            mgmt_link_id = mgmt_ip = mgmt_netmask = mgmt_df_gw = None
            links, selfips, routes = {},{},{}
            n_idx = 0
            for l in nmd['links']:
                if not l['mtu']:
                    l['mtu'] = 1500
                if n_idx == 0:
                    mgmt_link_id = l['id']
                    if not onenic:
                        n_idx += 1
                        continue
                if l['type'] in supported_link_types:
                    links[l['id']] = { 'net_name': 'net_1_%s' % n_idx, 'mtu': l['mtu'], 'interface': '1.%s' % n_idx, 'interface_index': n_idx, 'segmentation_id': 4094 - n_idx, 'tagged': False, 'route_domain': 0 }
                n_idx += 1
            for l in nmd['links']:
                if l['type'] == 'vlan':
                    if l['vlan_link'] not in links:
                        print "VLAN %s defined for unsupported link %s" % (
                            l['vlan_id'], l['vlan_link'])
                    else:
                        if not onenic and links[l['vlan_link']]['interface_index'] == 0:
                            print "VLAN tagging is not supported on management interface"
                        else:
                            links[l['id']] = { 'net_name': 'vlan_%s' % l['vlan_id'], 'mtu': links[l['vlan_link']]['mtu'], 'interface': links[l['vlan_link']]['interface'], 'interface_index': links[l['vlan_link']]['interface_index'], 'segmentation_id': l['vlan_id'], 'tagged': True, 'route_domain': 0 }
            # L3 routes and selfips
            for n in nmd['networks']:
                if n['link'] == mgmt_link_id:
                    if n['type'] == 'ipv4_dhcp' or n['type'] == 'ipv6_dhcp':
                        if onenic:
                            ip_out = subprocess.Popen("ip addr show mgmt|grep inet|xargs|cut -d' ' -f2|tr -d '\n'", stdout=subprocess.PIPE, shell=True).communicate()[0]
                            if ip_out.find('/') < 0:
                                print "the mgmt interface is configured for DHCP and 1NIC operation, but received no IP address"
                            else:
                                mgmt_ip = ip_out
                            gw_out = subprocess.Popen("ip route show default|grep default|grep via|cut -d' ' -f3|tr -d '\n'", stdout=subprocess.PIPE, shell=True).communicate()[0]
                            if len(gw_out) < 4:
                                print "the mgmt interface is configured for DHCP and 1NIC oepration, but received no default gateway."
                            else:
                                mgmt_df_gw = gw_out
                        else:
                            mgmt_dhcp = True
                    else:
                        mgmt_dhcp = False
                if n['type'] in supported_network_types:
                    for r in n['routes']:
                        if df_gw_set:
                            for l in links:
                                links[l]['route_domain'] = links[l]['segmentation_id']
                        if r['network'] == '0.0.0.0' or r['network'] == '::':
                            if n['link'] == mgmt_link_id:
                                mgmt_df_gw = r['gateway']
                                continue
                            elif n['link'] in links:
                                df_gw_set = True
                    for r in n['routes']:
                        if n['link'] in links:
                            r['route_domain'] = links[n['link']]['route_domain']
                            r['route_name'] = "route_%s" % r['network'].replace('.', '_').replace(':', '_').replace('/', '_')
                            if n['id'] not in routes:
                                routes[n['id']] = []
                            if r['network'] == '0.0.0.0' or r['network'] == '::':
                                if r['gateway'] != mgmt_df_gw:
                                    routes[n['id']].append(r)
                            else:
                                routes[n['id']].append(r)
                    if n['link'] in links:
                        netmask = None
                        if 'netmask' in n:
                            netmask = n['netmask']
                        if not n['link'] == mgmt_link_id:
                            selfips[n['id']] = { 'selfip_name': 'selfip_%s' % n['link'], 'net_name': links[n['link']]['net_name'], 'ip_address': n['ip_address'], 'netmask': netmask, 'route_domain':  links[n['link']]['route_domain'] }
                    if n['link'] == mgmt_link_id:
                        mgmt_ip = n['ip_address']
                        if 'netmask' in n:
                            mgmt_netmask = n['netmask']
            # setup management interface
            if not mgmt_dhcp:
                ns.write("tmsh modify sys global-settings mgmt-dhcp disabled\n")
                if not onenic:
                    ns.write("sleep 10\n")
                    if mgmt_netmask:
                        ns.write("tmsh create sys management-ip %s/%s\n" % (mgmt_ip, mgmt_netmask))
                    else:
                        ns.write("tmsh create sys management-ip %s\n" % mgmt_ip)
                    if mgmt_df_gw:
                        ns.write("tmsh create sys management-route default gateway %s\n" % mgmt_df_gw)
                    ns.write("ip link set mgmt mtu %s\n" % links[mgmt_link_id]['mtu'])
                    ns.write("echo 'ip link set mgmt mtu %s' > /config/startup\n" % links[mgmt_link_id]['mtu'])
                else:
                    onenic_net_name = links[mgmt_link_id]['net_name']
                    ns.write("tmsh create net vlan %s mtu %s interfaces replace-all-with { 1.0 } tag %s\n"
                             % (onenic_net_name, links[mgmt_link_id]['mtu'], 0))
                    if mgmt_netmask:
                        ns.write("tmsh create net self self_1nic address %s%%%s/%s vlan %s allow-service all\n" % (mgmt_ip, 0, mgmt_netmask, onenic_net_name))
                    else:
                        address_parts = mgmt_ip.split('/')
                        ns.write("tmsh create net self self_1nic address %s%%%s/%s vlan %s allow-service all\n"
                                 % (address_parts[0], 0, address_parts[1], onenic_net_name))
                    if mgmt_df_gw:
                        ns.write("tmsh create sys management-route default gateway %s\n" % mgmt_df_gw)
                        ns.write("tmsh create net route default network default gw %s\n" % mgmt_df_gw)
            # setup tagged and untagged interfaces
            for l_id in links:
                l = links[l_id]
                if l_id == mgmt_link_id:
                    continue
                if not l['tagged']:
                    ns.write("tmsh create net vlan %s mtu %s interfaces replace-all-with { %s } tag %s\n" % (l['net_name'], l['mtu'], l['interface'], l['segmentation_id']))
                else:
                    ns.write("tmsh create net vlan %s mtu %s interfaces replace-all-with { %s { tagged } } tag %s\n" % (l['net_name'], l['mtu'], l['interface'], l['segmentation_id']))
                if l['route_domain'] > 0:
                    ns.write("tmsh create net route-domain %s { id %s vlans add { %s } }\n" % (l['route_domain'], l['route_domain'], l['net_name']) )
            # setup selfips
            for n_id in selfips:
                s = selfips[n_id]
                if s['netmask']:
                    ns.write("tmsh create net self %s address %s%%%s/%s vlan %s allow-service all\n" % (s['selfip_name'], s['ip_address'], s['route_domain'], s['netmask'], s['net_name']))
                else:
                    ap = s['ip_address'].split('/')
                    ns.write("tmsh create net self %s address %s%%%s/%s vlan %s allow-service all\n" % (s['selfip_name'], ap[0], s['route_domain'], ap[1], s['net_name']))
            # add routes
            for n_id in routes:
                for r in routes[n_id]:
                    if r['network'] == '0.0.0.0' or r['network'] == '::':
                        if r['route_domain'] > 0:
                            ns.write("tmsh create net route default_%s network default%%%s gw %s%%%s\n" % (r['route_domain'], r['route_domain'], r['gateway'], r['route_domain']))
                        else:
                            ns.write("tmsh create net route default network default gw %s%%%s\n" % (r['gateway'], r['route_domain']))
                    else:
                        if 'netmask' in r:
                            ns.write("tmsh create net route %s_%s network %s%%%s/%s gw %s%%%s\n" % (r['route_name'], r['route_domain'], r['network'], r['route_domain'], r['netmask'], r['gateway'], r['route_domain']))
                        else:
                            rp = r['network'].slit('/')
                            ns.write("tmsh create net route %s_%s network %s%%%s/%s gw %s%%%s\n" % (r['route_name'], r['route_domain'], rp[0], r['route_domain'], rp[1], r['gateway'], r['route_domain']))
            ds = []
            ns = []
            for service in nmd['services']:
                if service['type'] == 'dns':
                    ds.append(service['address'])
                if service['type'] == 'ntp':
                    ns.append(service['address'])
            if ds:
                ns.write("tmsh modify sys dns name-servers replace-all-with { %s }\n" % " ".join(ds))
            if not ns:
                ns.append("10.0.77.54")
            ns.write("tmsh modify sys ntp servers replace-all-with { %s }\n" % " ".join(ns))
        EOF
            chmod +x /config/network_setup.sh
            /config/network_setup.sh
        }
        function setup_cleanup() {
            umount /mnt/config >/dev/null 2>&1
            tmsh save sys config
            bigstart restart
            check_mcpd_up
        }
        function main() {
            echo -n "initialization started at: "; date
            SECONDS=0
            echo "checking system is ready"
            setup_init
            echo "changing well known account passwords"
            setup_passwords
            echo "provisioning base management"
            setup_base
            echo "importing SSH keys"
            import_ssh_keys
            echo "provisioning networking from cloud-init network metadata"
            setup_networking
            echo "saving system configuration and restarting services"
            setup_cleanup
            duration=$SECONDS
            echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."
            echo -n "initialization complete at: "; date
        }
        main

runcmd: [nohup sh -c '/config/ibmbluemix_vsi_init.sh' >> /var/log/ibm-tmos-init.log &]
