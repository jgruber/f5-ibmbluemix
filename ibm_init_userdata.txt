#cloud-config
bootcmd:
  - /usr/bin/setdb dhclient.mgmt disable && echo '*** disabled dhclient'
  - /usr/bin/setdb provision.1nic forced_enable && echo '*** enabled 1nic'

write_files:
  - path: /config/ibmbluemix_vsi_init.sh
    permissions: 0755
    content: |
        #!/bin/bash
        function check_mcpd_up() {
            checks=0
            while [ $checks -lt 120 ]; do echo -n "checking mcpd..."
                if tmsh -a show sys mcp-state field-fmt | grep -q running; then
                    echo ready
                    break
                fi
                echo not ready
                let checks=checks+1
                sleep 10
            done
        }
        function setup_init() {
            check_mcpd_up
        }
        function setup_passwords() {
            /usr/bin/passwd admin __TMOS_ADMIN_PASSWORD__ >/dev/null 2>&1
            /usr/bin/passwd root __TMOS_ROOT_PASSWORD__ >/dev/null 2>&1
        }
        function setup_1_nic_config() {
            tmsh modify sys db provision.1nic value forced_enable
            tmsh modify sys global-settings mgmt-dhcp disabled
        }
        function mount_config_drive() {
            configDriveSrc=$(blkid -t LABEL="config-2" -odevice)
            if [[ ! -z $configDriveSrc ]]
            then
                mounted=$(cat /proc/mounts | grep $configDriveSrc | wc -l)
                if [[ $mounted == 0 ]]
                then 
                    configDriveDest="/mnt/config"
                    mkdir -p $configDriveDest
                    mount "$configDriveSrc" $configDriveDest;
                fi
            fi
        }
        function import_ssh_keys() {
            mount_config_drive
            /usr/bin/python - << EOF
        import sys, json
        meta_data=json.load(open('/mnt/config/openstack/latest/meta_data.json'))
        for key in meta_data['public_keys']:
            with open('/root/.ssh/authorized_keys', 'a') as ak:
                ak.write(meta_data['public_keys'][key] + '\n')
        EOF
        }
        function setup_networking() {
            mount_config_drive
            /usr/bin/python - << EOF
        import os, json, subprocess
        network_data = json.load(open('/mnt/config/openstack/latest/network_data.json'))
        onenic = False
        fnull = open(os.devnull, 'w')
        test_1nic = subprocess.call(['/usr/bin/tmsh', 'list', 'net', 'interface', '1.0'], stdout=fnull)
        if test_1nic == 0:
            onenic = True
        with open('/config/network_setup.sh','w') as ns:
            ns.write("#!/bin/bash\n")
            supported_link_types = ['phy', 'bridge', 'ovs', 'vif', 'tap']
            supported_network_types = ['ipv4', 'ipv6']
            default_route_set = False
            management_link_id = None
            management_mtu = 1500
            management_dhcp = True
            management_ip = None
            management_netmask = None
            management_default_gateway = None
            links = {}
            selfips = {}
            routes = {}
            nic_index = 0
            # untagged interface networks
            for link in network_data['links']:
                mtu = 1500
                if link['mtu']:
                    mtu = link['mtu']
                if nic_index == 0:
                    management_link_id = link['id']
                    management_mtu = mtu
                    if not onenic:
                        nic_index += 1
                        continue
                if link['type'] in supported_link_types:
                    links[link['id']] = {
                        'net_name': 'net_1_%s' % nic_index,
                        'mtu': mtu,
                        'interface': '1.%s' % nic_index,
                        'interface_index': nic_index,
                        'segmentation_id': 4095 - nic_index,
                        'tagged': False,
                        'route_domain': 0
                    }
                nic_index += 1
            # vlan tagged networks
            for link in network_data['links']:
                if link['type'] == 'vlan':
                    if link['vlan_link'] not in links:
                        print "VLAN %s defined for unsupported link %s" % (
                            link['vlan_id'], link['vlan_link'])
                    else:
                        if not onenic and links[link['vlan_link']]['interface_index'] == 0:
                            print "VLAN tagging is not supported on management interface"
                        else:
                            links[link['id']] = {
                                'net_name': 'vlan_%s' % link['vlan_id'],
                                'mtu': links[link['vlan_link']]['mtu'],
                                'interface': links[link['vlan_link']]['interface'],
                                'interface_index': links[link['vlan_link']]['interface_index'],
                                'segmentation_id': link['vlan_id'],
                                'tagged': True,
                                'route_domain': 0
                            }
            # L3 routes and selfips
            for net in network_data['networks']:
                if net['link'] == management_link_id:
                    if net['type'] == 'ipv4_dhcp' or net['type'] == 'ipv6_dhcp':
                        management_dhcp = True
                    else:
                        management_dhcp = False
                if net['type'] in supported_network_types:
                    for route in net['routes']:
                        if route['network'] == '0.0.0.0' or route['network'] == '::':
                            if net['link'] == management_link_id:
                                management_default_gateway = route['gateway']
                                continue
                            elif net['link'] in links:
                                if default_route_set:
                                    for link in links:
                                        link['route_domain'] = link['segmentation_id']
                                default_route_set = True
                    for route in net['routes']:
                        if net['link'] in links:
                            route['route_domain'] = links[net['link']]['route_domain']
                            route['route_name'] = \
                                "route_%s" % route['network'].replace(
                                    '.', '_').replace(
                                    ':', '_').replace(
                                    '/', '_')
                            if net['id'] not in routes:
                                routes[net['id']] = []
                            if route['network'] == '0.0.0.0' or route['network'] == '::':
                                if route['gateway'] != management_default_gateway:
                                    routes[net['id']].append(route)
                            else:
                                routes[net['id']].append(route)
                    if net['link'] in links:
                        netmask = None
                        if 'netmask' in net:
                            netmask = net['netmask']
                        if not net['link'] == management_link_id:
                            selfips[net['id']] = {
                                'selfip_name': 'selfip_%s' % net['link'],
                                'net_name': links[net['link']]['net_name'],
                                'ip_address': net['ip_address'],
                                'netmask': netmask,
                                'route_domain':  links[net['link']]['route_domain']
                            }
                    if net['link'] == management_link_id:
                        management_ip = net['ip_address']
                        if 'netmask' in net:
                            management_netmask = net['netmask']
            # setup management interface
            if not management_dhcp:
                ns.write("tmsh modify sys global-settings mgmt-dhcp disabled\n")
                if not onenic:
                    ns.write("sleep 10\n")
                    if management_netmask:
                        ns.write("tmsh create sys management-ip %s/%s\n" % (management_ip, management_netmask))
                    else:
                        ns.write("tmsh create sys management-ip %s\n" % management_ip)
                    if management_default_gateway:
                        ns.write("tmsh create sys management-route default gateway %s\n" % management_default_gateway)
                    ns.write("ip link set mgmt mtu %s\n" % management_mtu)
                    ns.write("echo 'ip link set mgmt mtu %s' > /config/startup\n" % management_mtu)
                else:
                    onenic_net_name = links[management_link_id]['net_name']
                    onenic_route_domain = links[management_link_id]['route_domain']
                    ns.write("tmsh create net vlan %s mtu %s interfaces replace-all-with { 1.0 }\n"
                             % (onenic_net_name, management_mtu))
                    if management_netmask:
                        ns.write("tmsh create net self self_1nic address %s%%%s/%s vlan %s allow-service all\n" % (management_ip, onenic_route_domain, management_netmask, onenic_net_name))
                    else:
                        address_parts = management_ip.split('/')
                        ns.write("tmsh create net self self_1nic address %s%%%s/%s vlan %s allow-service all\n"
                                 % (address_parts[0], onenic_route_domain, address_parts[1], onenic_net_name))
                    if management_default_gateway:
                        ns.write("tmsh create sys management-route default gateway %s\n" % management_default_gateway)
            # setup tagged and untagged interfaces
            for link_id in links:
                link = links[link_id]
                if link_id == management_link_id:
                    continue
                if not link['tagged']:
                    ns.write("tmsh create net vlan %s mtu %s interfaces replace-all-with { %s }\n" % (link['net_name'], link['mtu'], link['interface']))
                else:
                    ns.write("tmsh create net vlan %s mtu %s interfaces replace-all-with { %s { tagged } } tag %s\n" % (link['net_name'], link['mtu'], link['interface'], link['segmentation_id']))
                if link['route_domain'] > 0:
                    ns.write("tmsh create net route-domain %s { id %s vlans add { %s } }\n" % (link['route_domain'], link['route_domain'], link['net_name']) )
            # setup selfips
            for net_id in selfips:
                selfip = selfips[net_id]
                if selfip['netmask']:
                    ns.write("tmsh create net self %s address %s%%%s/%s vlan %s allow-service all\n" % (selfip['selfip_name'], selfip['ip_address'], selfip['route_domain'], selfip['netmask'], selfip['net_name']))
                else:
                    address_parts = selfip['ip_address'].split('/')
                    ns.write("tmsh create net self %s address %s%%%s/%s vlan %s allow-service all\n" % (selfip['selfip_name'], address_parts[0], selfip['route_domain'], address_parts[1], selfip['net_name']))
            # add routes
            for net_id in routes:
                for route in routes[net_id]:
                    if route['network'] == '0.0.0.0' or route['network'] == '::':
                        if route['route_domain'] > 0:
                            ns.write("tmsh create net route default_%s network default%%%s gw %s%%%s\n" % (route['route_domain'], route['route_domain'], route['gateway'], route['route_domain']))
                        else:
                            ns.write("tmsh create net route default network default gw %s%%%s\n" % (route['gateway'], route['route_domain']))
                    else:
                        if 'netmask' in route:
                            ns.write("tmsh create net route %s_%s network %s%%%s/%s gw %s%%%s\n" % (route['route_name'], route['route_domain'], route['network'], route['route_domain'], route['netmask'], route['gateway'], route['route_domain']))
                        else:
                            route_parts = route['network'].slit('/')
                            ns.write("tmsh create net route %s_%s network %s%%%s/%s gw %s%%%s\n" % (route['route_name'], route['route_domain'], route_parts[0], route['route_domain'], route_parts[1], route['gateway'], route['route_domain']))
            dns_servers = []
            for service in network_data['services']:
                if service['type'] == 'dns':
                    dns_servers.append(service['address'])
            if dns_servers:
                dns_server_string = " ".join(dns_servers)
                ns.write("tmsh modify sys dns name-servers replace-all-with { %s }\n" % dns_server_string)
            ntp_servers = []
            for service in network_data['services']:
                if service['type'] == 'ntp':
                    ntp_servers.append(service['address'])
            if ntp_servers:
                ntp_server_string = " ".join(ntp_servers)
                ns.write("tmsh modify sys ntp servers replace-all-with { %s }\n" % ntp_server_string)
        EOF
            chmod +x /config/network_setup.sh
            /config/network_setup.sh
        }
        function setup_cleanup() {
            umount /mnt/config >/dev/null 2>&1
            tmsh save sys config
            bigstart restart
            check_mcpd_up
        }
        function main() {
            echo -n "initialization started at: "; date
            SECONDS=0
            echo "checking system is ready"
            setup_init
            duration=$SECONDS
            echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."
            echo "changing well known account passwords"
            setup_passwords
            duration=$SECONDS
            echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."
            echo "forcing single NIC configuration"
            setup_1_nic_config
            duration=$SECONDS
            echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."
            echo "importing SSH keys"
            import_ssh_keys
            duration=$SECONDS
            echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."
            echo "provisioning networking from cloud-init network metadata"
            setup_networking
            duration=$SECONDS
            echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."
            echo "saving system configuration and restarting services"
            setup_cleanup
            duration=$SECONDS
            echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."
            echo -n "initialization complete at: "; date
        }
        main

runcmd: [nohup sh -c '/config/ibmbluemix_vsi_init.sh' >> /var/log/ibm-tmos-init.log &]
